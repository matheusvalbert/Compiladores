package ihc;

import code.Singleton;
import java.awt.Rectangle;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

public class Principal extends javax.swing.JFrame {

    Singleton singleton = Singleton.getInstance();
    private ArrayList<String> entradaHistorico = new ArrayList<>();
    private int flag = 0;

    /**
     * Creates new form Principal
     */
    public Principal() {
        
        initComponents();
        run.setEnabled(false);
        debug.setEnabled(false);
	ok.setEnabled(false);
	entrada.setEnabled(false);
        reset.setEnabled(false);
        setLocationRelativeTo(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codigoScroll = new javax.swing.JScrollPane();
        codigo = new javax.swing.JTable();
        dadosScroll = new javax.swing.JScrollPane();
        dados = new javax.swing.JTable();
        historicoEntradaLabel = new javax.swing.JLabel();
        historicoEntradaScroll = new javax.swing.JScrollPane();
        historicoEntrada = new javax.swing.JList<>();
        saidaLabel = new javax.swing.JLabel();
        saidaScroll = new javax.swing.JScrollPane();
        saida = new javax.swing.JList<>();
        entradaLabel = new javax.swing.JLabel();
        entrada = new javax.swing.JTextField();
        ok = new javax.swing.JButton();
        adicionarCodigo = new javax.swing.JButton();
        run = new javax.swing.JButton();
        debug = new javax.swing.JButton();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Virtual Machine");
        setResizable(false);

        codigo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linha", "Breakpoint", "Comando", "Arg 1", "Arg 2", "Label", "Comentario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        codigo.getTableHeader().setReorderingAllowed(false);
        codigoScroll.setViewportView(codigo);
        if (codigo.getColumnModel().getColumnCount() > 0) {
            codigo.getColumnModel().getColumn(0).setResizable(false);
            codigo.getColumnModel().getColumn(0).setPreferredWidth(12);
            codigo.getColumnModel().getColumn(1).setResizable(false);
            codigo.getColumnModel().getColumn(1).setPreferredWidth(35);
            codigo.getColumnModel().getColumn(2).setResizable(false);
            codigo.getColumnModel().getColumn(2).setPreferredWidth(30);
            codigo.getColumnModel().getColumn(3).setResizable(false);
            codigo.getColumnModel().getColumn(3).setPreferredWidth(25);
            codigo.getColumnModel().getColumn(4).setResizable(false);
            codigo.getColumnModel().getColumn(4).setPreferredWidth(25);
            codigo.getColumnModel().getColumn(5).setResizable(false);
            codigo.getColumnModel().getColumn(5).setPreferredWidth(25);
            codigo.getColumnModel().getColumn(6).setResizable(false);
            codigo.getColumnModel().getColumn(6).setPreferredWidth(250);
        }

        dados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posicao", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dados.getTableHeader().setReorderingAllowed(false);
        dadosScroll.setViewportView(dados);
        if (dados.getColumnModel().getColumnCount() > 0) {
            dados.getColumnModel().getColumn(0).setResizable(false);
            dados.getColumnModel().getColumn(1).setResizable(false);
        }

        historicoEntradaLabel.setText("Historico de Entrada:");

        historicoEntrada.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        historicoEntradaScroll.setViewportView(historicoEntrada);

        saidaLabel.setText("Saida de Dados:");

        saida.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        saidaScroll.setViewportView(saida);

        entradaLabel.setText("Entrada:");

        entrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaActionPerformed(evt);
            }
        });

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        adicionarCodigo.setText("Adicionar Codigo...");
        adicionarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarCodigoActionPerformed(evt);
            }
        });

        run.setText("RUN");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        debug.setText("DEBUG");
        debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugActionPerformed(evt);
            }
        });

        reset.setText("RESET");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(historicoEntradaLabel)
                            .addComponent(historicoEntradaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saidaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saidaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(entradaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(codigoScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dadosScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(adicionarCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(run, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(debug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dadosScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(historicoEntradaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saidaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(entradaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saidaScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(historicoEntradaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ok)))
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(adicionarCodigo)
                        .addGap(18, 18, 18)
                        .addComponent(run)
                        .addGap(18, 18, 18)
                        .addComponent(debug)
                        .addGap(18, 18, 18)
                        .addComponent(reset)
                        .addContainerGap(15, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entradaActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        
	singleton.entradaSet(Integer.parseInt(entrada.getText()));
        entradaHistorico.add(entrada.getText());
        String[] print = new String[entradaHistorico.size()];
        entradaHistorico.toArray(print);
        historicoEntrada.setListData(print);
        entrada.setText("");
        entrada.setEnabled(false);
        ok.setEnabled(false);
        run.setEnabled(true);
        debug.setEnabled(true);

        if(singleton.flag == 1) {

                while (singleton.executa() == false) {
                    
                    if(singleton.getArrayDeLinhas().get(singleton.getI() - 1)[0].equals("HLT")) {

                        run.setEnabled(false);
                        debug.setEnabled(false);
                        break;
                    }
                    
                    else {
                    
                        if(singleton.getArrayDeLinhas().size() != singleton.getI()) {
                            codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                            codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                        }
                        saida.setListData(singleton.saidaGet());
                        repaint();

                            if (singleton.leitura == true) {

                                ok.setEnabled(true);
                                entrada.setEnabled(true);
                                run.setEnabled(false);
                                debug.setEnabled(false);
                                singleton.flag = 1;
                                break;
                            }
                            if(singleton.getArrayDeLinhas().size() == singleton.getI())
                                    adicionarCodigo.setEnabled(true);
                    }
                }
        }
        else {
            
                boolean flag = false;

                DefaultTableModel cod = (DefaultTableModel) codigo.getModel();

                for(int i = 0; i < cod.getRowCount(); i++) {

                    if((boolean) cod.getValueAt(i, 1) == true) {

                        flag = true;
                    }
                }
                
                if(flag == true) {

                    while (singleton.executa() == false) {

                        if(singleton.getArrayDeLinhas().size() != singleton.getI()) {
                            codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                            codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                        }
                        saida.setListData(singleton.saidaGet());
                        repaint();

                        if (singleton.leitura == true) {

                            ok.setEnabled(true);
                            entrada.setEnabled(true);
                            run.setEnabled(false);
                            debug.setEnabled(false);
                            singleton.flag = 2;
                            break;
                        }
                        if(singleton.getArrayDeLinhas().size() == singleton.getI())
                            adicionarCodigo.setEnabled(true);

                        if((boolean) cod.getValueAt(singleton.getI(), 1) == true) {

                            break;
                        }
                    }
                }
                
                else {

                    if (singleton.executa() == false) {

                        codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                        codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                        repaint();
                            if(singleton.getArrayDeLinhas().size() == singleton.getI())
                                adicionarCodigo.setEnabled(true);
                    }
                }
        }
    }//GEN-LAST:event_okActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        
        while (singleton.executa() == false) {
            
            if(singleton.getArrayDeLinhas().get(singleton.getI() - 1)[0].equals("HLT")) {
                
                run.setEnabled(false);
                debug.setEnabled(false);
                break;
            }
            
            else {

                if(singleton.getArrayDeLinhas().size() != singleton.getI()) {
                    codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                    codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                }
                saida.setListData(singleton.saidaGet());
                repaint();

                if (singleton.leitura == true) {

                    ok.setEnabled(true);
                    entrada.setEnabled(true);
                    run.setEnabled(false);
                    debug.setEnabled(false);
                    singleton.flag = 1;
                    break;
                }
            }
        }
    }//GEN-LAST:event_runActionPerformed

    private void adicionarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarCodigoActionPerformed
        
        JFileChooser selecionarArquivo;
        selecionarArquivo = new JFileChooser();
	selecionarArquivo.setCurrentDirectory(new java.io.File("."));
        int arquivo = selecionarArquivo.showOpenDialog(null);
        
        if(arquivo == JFileChooser.APPROVE_OPTION) {
            
            run.setEnabled(true);
            debug.setEnabled(true);
            reset.setEnabled(true);
            entradaHistorico.clear();
            singleton.reset(true);
            String[] print = new String[entradaHistorico.size()];
            entradaHistorico.toArray(print);
            historicoEntrada.setListData(print);
									
            singleton.lerArquivo(selecionarArquivo.getSelectedFile());
            
            Object[] linha = new Object[7];            
            
            ArrayList<String[]> array =  singleton.criaArrayDeLinhas();
            
            int loop = array.size();
            
            DefaultTableModel cod = (DefaultTableModel) codigo.getModel();
            
            if (flag == 0) {
                
                for(int i = 0; i < loop; i++) {
                
                    linha[0] = i;
                    linha[1] = false;
                    linha[2] = array.get(i)[0];
                    linha[3] = array.get(i)[1];
                    
                    if(linha[2].equals("JMP") || linha[2].equals("JMPF") || linha[2].equals("CALL"))
                        for(int j = 0; j < array.size(); j++)
                            if(linha[3].equals(String.valueOf(j)))
                                linha[3] = array.get(j)[3];

                    linha[4] = array.get(i)[2];
                    linha[5] = array.get(i)[3];    
                    linha[6] = array.get(i)[4];
                    cod.addRow(linha); 
                }
                
                DefaultTableModel p = (DefaultTableModel) dados.getModel();

                Object[] pilha = new Object[2];

                for(int i = 0; i < 1000; i++) {

                    pilha[0] = i;
                    pilha[1] = singleton.retornaI()[i];
                    p.addRow(pilha);
                }

                flag = 1;
            }
            else {
                
                paintCod();
            }
            
            codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
            codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
        
            saida.setListData(singleton.saidaGet());
            repaint();          
	}
    }//GEN-LAST:event_adicionarCodigoActionPerformed

    private void debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugActionPerformed
        
        boolean flag = false;

        DefaultTableModel cod = (DefaultTableModel) codigo.getModel();
        
        for(int i = 0; i < cod.getRowCount(); i++) {
            
            if((boolean) cod.getValueAt(i, 1) == true) {
                
                flag = true;
            }
        }
        
        if(flag == true) {
            
            while (singleton.executa() == false) {
                
                if(singleton.getArrayDeLinhas().get(singleton.getI() - 1)[0].equals("HLT")) {
                    
                    run.setEnabled(false);
                    debug.setEnabled(false);
                    break;
                }
                
                else {

                    if(singleton.getArrayDeLinhas().size() != singleton.getI()) {
                        codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                        codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                    }
                    saida.setListData(singleton.saidaGet());
                    repaint();

                    if (singleton.leitura == true) {

                        ok.setEnabled(true);
                        entrada.setEnabled(true);
                        run.setEnabled(false);
                        debug.setEnabled(false);
                        singleton.flag = 2;
                        break;
                    }

                    if((boolean) cod.getValueAt(singleton.getI(), 1) == true) {

                        break;
                    }

                    if(singleton.getArrayDeLinhas().size() - 1 == singleton.getI()) {

                        break;
                    }
                }
            }
        }
        
        else {
        
            if (singleton.executa() == false) {
                
                if(!singleton.getArrayDeLinhas().get(singleton.getI() - 1)[0].equals("HLT")) {

                    if(singleton.getArrayDeLinhas().size() != singleton.getI()) {
                        codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
                        codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
                    }
                    saida.setListData(singleton.saidaGet());
                    repaint();

                    if (singleton.leitura == true) {

                        run.setEnabled(false);
                        debug.setEnabled(false);
                        ok.setEnabled(true);
                        entrada.setEnabled(true);
                        singleton.flag = 2;
                    }
                }
                else {
                    
                    run.setEnabled(false);
                    debug.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_debugActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed

        entradaHistorico.clear();
        String[] print = new String[entradaHistorico.size()];
        entradaHistorico.toArray(print);
        historicoEntrada.setListData(print);
        singleton.reset(false);
        codigo.setRowSelectionInterval(singleton.getI(), singleton.getI());
        codigo.scrollRectToVisible(new Rectangle(codigo.getCellRect(singleton.getI(), 0, true)));
        saida.setListData(singleton.saidaGet());
        repaint();
        run.setEnabled(true);
        debug.setEnabled(true);
        ok.setEnabled(false);
        entrada.setEnabled(false);
        
        DefaultTableModel cod = (DefaultTableModel) codigo.getModel();
        
        for(int i = 0; i < singleton.getArrayDeLinhas().size(); i++) {
            
            cod.setValueAt(false, i, 1);
        }
    }//GEN-LAST:event_resetActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
    }
    
    @Override
    public void repaint() {
        
        DefaultTableModel p = (DefaultTableModel) dados.getModel();
        
        for(int i = 0; i < 1000; i++) {
            
            p.setValueAt(singleton.retornaI()[i], i, 1);
        }
    }
    
    public void paintCod() {
        
        DefaultTableModel cod = (DefaultTableModel) codigo.getModel();
        
        ArrayList<String[]> array =  singleton.getArrayDeLinhas();
        
        int arraySize = array.size();
        
        Object[] linha = new Object[7];
        
        int linhaCount = cod.getRowCount();
        
        for(int i = linhaCount - 1; i >= 0; i--) {
            
            cod.removeRow(i);
        }
        
        for(int i = 0; i < arraySize; i++) {
                
            linha[0] = i;
            linha[1] = false;
            linha[2] = array.get(i)[0];
            linha[3] = array.get(i)[1];
            
            if(linha[2].equals("JMP") || linha[2].equals("JMPF") || linha[2].equals("CALL"))
                for(int j = 0; j < array.size(); j++)
                    if(linha[3].equals(String.valueOf(j)))
                        linha[3] = array.get(j)[3];
            
            linha[4] = array.get(i)[2];
            linha[5] = array.get(i)[3];
            linha[6] = array.get(i)[4];
            cod.addRow(linha); 
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarCodigo;
    private javax.swing.JTable codigo;
    private javax.swing.JScrollPane codigoScroll;
    private javax.swing.JTable dados;
    private javax.swing.JScrollPane dadosScroll;
    private javax.swing.JButton debug;
    private javax.swing.JTextField entrada;
    private javax.swing.JLabel entradaLabel;
    private javax.swing.JList<String> historicoEntrada;
    private javax.swing.JLabel historicoEntradaLabel;
    private javax.swing.JScrollPane historicoEntradaScroll;
    private javax.swing.JButton ok;
    private javax.swing.JButton reset;
    private javax.swing.JButton run;
    private javax.swing.JList<String> saida;
    private javax.swing.JLabel saidaLabel;
    private javax.swing.JScrollPane saidaScroll;
    // End of variables declaration//GEN-END:variables
}
