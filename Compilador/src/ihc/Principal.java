package ihc;

import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

public class Principal extends javax.swing.JFrame {

    Singleton singleton = Singleton.getInstance();
    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
    Highlighter trocarCor;
    
    /**
     * Creates new form IHC
     */
    public Principal() {
        
        initComponents();
        Terminal.setEditable(false);
        Terminal.setBackground(Color.WHITE);
        trocarCor = Codigo.getHighlighter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollTerminal = new javax.swing.JScrollPane();
        Terminal = new javax.swing.JTextPane();
        ScrollCodigo = new javax.swing.JScrollPane();
        Codigo = new javax.swing.JTextPane();
        BarraSuperior = new javax.swing.JMenuBar();
        Arquivo = new javax.swing.JMenu();
        Abrir = new javax.swing.JMenuItem();
        Salvar = new javax.swing.JMenuItem();
        SalvarComo = new javax.swing.JMenuItem();
        Compilar = new javax.swing.JMenu();
        RealizarCompilacao = new javax.swing.JMenuItem();
        RemoverErros = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Terminal.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ScrollTerminal.setViewportView(Terminal);

        Codigo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ScrollCodigo.setViewportView(Codigo);
        TextLineNumber tln = new TextLineNumber(Codigo);

        Arquivo.setText("Arquivo");

        Abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Abrir.setText("Abrir...");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        Arquivo.add(Abrir);

        Salvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Salvar.setText("Salvar");
        Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarActionPerformed(evt);
            }
        });
        Arquivo.add(Salvar);

        SalvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SalvarComo.setText("Salvar como");
        SalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarComoActionPerformed(evt);
            }
        });
        Arquivo.add(SalvarComo);

        BarraSuperior.add(Arquivo);

        Compilar.setText("Compilar");

        RealizarCompilacao.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        RealizarCompilacao.setText("Compilar Codigo");
        RealizarCompilacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RealizarCompilacaoActionPerformed(evt);
            }
        });
        Compilar.add(RealizarCompilacao);

        RemoverErros.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        RemoverErros.setText("Remover Erros");
        RemoverErros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoverErrosActionPerformed(evt);
            }
        });
        Compilar.add(RemoverErros);

        BarraSuperior.add(Compilar);

        setJMenuBar(BarraSuperior);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
                    .addComponent(ScrollTerminal))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollTerminal, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ScrollCodigo.setRowHeaderView(tln);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        
        JFileChooser selecionarArquivo;
        selecionarArquivo = new JFileChooser();
	selecionarArquivo.setCurrentDirectory(new java.io.File("."));
        int arquivo = selecionarArquivo.showOpenDialog(null);
        
        if(arquivo == JFileChooser.APPROVE_OPTION) {
            
            try {
                
                singleton.selecionarArquivo(selecionarArquivo.getSelectedFile());
                singleton.leitura();
                Codigo.setText(singleton.printCodigo());
                Codigo.setCaretPosition(0);
                
                String text = Terminal.getText();
                text += "Abrindo arquivo.\n";
                Terminal.setText(text);
                
            } catch (FileNotFoundException ex) {
                
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    private void RealizarCompilacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RealizarCompilacaoActionPerformed
        
        if(singleton.arquivoAberto() == true) {
        
            try {

                singleton.setCodigo(Codigo.getText());
                singleton.salvar();
                
                String text = Terminal.getText();
                //text += "Salvando Alteracoes no arquivo.\n";
                Terminal.setText(text);

            } catch (IOException ex) {

                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        else {
            
            JFileChooser selecionarArquivo;
            selecionarArquivo = new JFileChooser();
            selecionarArquivo.setCurrentDirectory(new java.io.File("."));
            int arquivo = selecionarArquivo.showSaveDialog(null);

            if(arquivo == JFileChooser.APPROVE_OPTION) {

                try {

                    singleton.selecionarArquivo(selecionarArquivo.getSelectedFile());
                    singleton.setCodigo(Codigo.getText());
                    singleton.salvar();
                    
                    String text = Terminal.getText();
                    //text += "Nenhum arquivo aberto, criando novo arquivo.\n";
                    Terminal.setText(text);

                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
                
        try {
            
            String text = Terminal.getText();
            //text += "Compilando.\n";
            String saidaCompilacao = singleton.compilar();
            text += saidaCompilacao + "\n";
            Terminal.setText(text);
            
            if(!saidaCompilacao.equals("Compilacao realizada com sucesso")) {
                
                //mover cursor para a linha ***
                Codigo.setCaretPosition(Codigo.getDocument().getDefaultRootElement().getElement(singleton.returnLinha()).getStartOffset());
                //mover cursor para a linha ***
                
                int inicio = Codigo.getCaretPosition(), fim = Codigo.getDocument().getDefaultRootElement().getElement(singleton.returnLinha() + 1).getStartOffset() - 1;
                
                //trocar de cor ***
                //Codigo.getHighlighter().addHighlight(inicio, fim, painter);
                //trocar de cor ***

                trocarCor.addHighlight(inicio, fim, painter);
            }
            else {
                
                Codigo Codigo = new Codigo();
                Codigo.setVisible(true);
                Codigo.printCodigo(singleton.getCodigo());
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RealizarCompilacaoActionPerformed

    private void SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarActionPerformed
        
        if(singleton.arquivoAberto() == true) {
        
            try {

                singleton.setCodigo(Codigo.getText());
                singleton.salvar();
                
                String text = Terminal.getText();
                text += "Salvando Alteracoes no arquivo.\n";
                Terminal.setText(text);

            } catch (IOException ex) {

                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        else {
            
            JFileChooser selecionarArquivo;
            selecionarArquivo = new JFileChooser();
            selecionarArquivo.setCurrentDirectory(new java.io.File("."));
            int arquivo = selecionarArquivo.showSaveDialog(null);

            if(arquivo == JFileChooser.APPROVE_OPTION) {

                try {

                    singleton.selecionarArquivo(selecionarArquivo.getSelectedFile());
                    singleton.setCodigo(Codigo.getText());
                    singleton.salvar();
                    
                    String text = Terminal.getText();
                    text += "Nenhum arquivo aberto, criando novo arquivo.\n";
                    Terminal.setText(text);

                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_SalvarActionPerformed

    private void SalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarComoActionPerformed
        
        JFileChooser selecionarArquivo;
        selecionarArquivo = new JFileChooser();
	selecionarArquivo.setCurrentDirectory(new java.io.File("."));
        int arquivo = selecionarArquivo.showSaveDialog(null);
        
        if(arquivo == JFileChooser.APPROVE_OPTION) {
                
            try {
                
                singleton.selecionarArquivo(selecionarArquivo.getSelectedFile());
                singleton.setCodigo(Codigo.getText());
                singleton.salvar();
                String text = Terminal.getText();
                text += "Criando novo arquivo e salvando.\n";
                Terminal.setText(text);
                
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SalvarComoActionPerformed

    private void RemoverErrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoverErrosActionPerformed
        
        trocarCor.removeAllHighlights();
        String text = Terminal.getText();
        text += "Erros removidos.\n";
        Terminal.setText(text);
    }//GEN-LAST:event_RemoverErrosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenu Arquivo;
    private javax.swing.JMenuBar BarraSuperior;
    private javax.swing.JTextPane Codigo;
    private javax.swing.JMenu Compilar;
    private javax.swing.JMenuItem RealizarCompilacao;
    private javax.swing.JMenuItem RemoverErros;
    private javax.swing.JMenuItem Salvar;
    private javax.swing.JMenuItem SalvarComo;
    private javax.swing.JScrollPane ScrollCodigo;
    private javax.swing.JScrollPane ScrollTerminal;
    private javax.swing.JTextPane Terminal;
    // End of variables declaration//GEN-END:variables
}
